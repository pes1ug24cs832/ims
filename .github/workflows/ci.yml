name: IMS CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop", "feature/*" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build:
    name: Build and Install Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

  test:
    name: Run Tests
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run pytest
      run: |
        pytest --disable-warnings -v

  coverage:
    name: Test Coverage
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Generate coverage report
      run: |
        pytest --cov=src --cov-report=html --cov-report=term
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/
        
    - name: Check coverage threshold
      run: |
        coverage_percent=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
        if (( $(echo "$coverage_percent < 75" | bc -l) )); then
          echo "Coverage below 75% threshold: $coverage_percent%"
          exit 1
        fi

  lint:
    name: Code Quality
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run pylint
      run: |
        pylint src/ --output-format=parseable --reports=y > pylint-report.txt || true
        score=$(grep "Your code has been rated at" pylint-report.txt | grep -o '[0-9.]*' | head -1)
        if (( $(echo "$score < 7.5" | bc -l) )); then
          echo "Pylint score below 7.5 threshold: $score"
          exit 1
        fi
        
    - name: Upload pylint report
      uses: actions/upload-artifact@v3
      with:
        name: pylint-report
        path: pylint-report.txt

  security:
    name: Security Scan
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run bandit
      run: |
        bandit -r src/ -f txt -o bandit-report.txt || true
        if grep -q "Issue: [High]" bandit-report.txt; then
          echo "Critical security issues found"
          exit 1
        fi
        
    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: bandit-report.txt

  package:
    name: Create Deployment Package
    needs: [coverage, lint, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download coverage report
      uses: actions/download-artifact@v3
      with:
        name: coverage-report
        path: reports/coverage
        
    - name: Download pylint report
      uses: actions/download-artifact@v3
      with:
        name: pylint-report
        path: reports
        
    - name: Download bandit report
      uses: actions/download-artifact@v3
      with:
        name: bandit-report
        path: reports
        
    - name: Create deployment package
      run: |
        VERSION=$(date +%Y%m%d_%H%M%S)
        PACKAGE=deployment-package-$VERSION
        mkdir -p $PACKAGE
        cp -r src/ $PACKAGE/
        cp -r docs/ $PACKAGE/
        cp -r sample_data/ $PACKAGE/
        cp -r reports/ $PACKAGE/
        cp requirements.txt $PACKAGE/
        cp README.md $PACKAGE/
        zip -r $PACKAGE.zip $PACKAGE/
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment-package-*.zip